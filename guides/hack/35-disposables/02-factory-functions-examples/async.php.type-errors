<?hh

namespace Hack\UserDocumentation\Examples\Intro\Returning\Async;

class Handle implements \IDisposable {
  public function __construct(
    private string $id,
  ) {
  }

  public function __dispose(): void {
    \printf("Releasing %s.\n", $this->id);
  }
}

class Foo {
  private string $id;
  public function __construct(
  ) {
    $this->id = 'opaque internal handle';
  }
  
  <<__ReturnDisposable>>
  public async function getHandleAsync(): Awaitable<Handle> {
    return new Handle($this->id);
  }
}

async function main() {
  $foo = new Foo();
  using ($handle = await $foo->getHandleAsync()) {
    print("doing stuff\n");
  }
}

\HH\Asio\Join(main());
