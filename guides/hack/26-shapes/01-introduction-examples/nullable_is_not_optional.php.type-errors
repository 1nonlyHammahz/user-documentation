<?hh // strict

namespace Hack\UserDocumentation\Shapes\Introduction\Examples\NullableIsNotOptional;

type PointWithOptionalZ = shape('x' => int, 'y' => int, ?'z' => int);
type PointWithNullableZ = shape('x' => int, 'y' => int, 'z' => ?int);

function optional_is_not_nullable(): PointWithOptionalZ {
  // Invalid return type (Typing[4110]
  //   This is an int
  //   It is incompatible with a nullable type 
  return shape('x' => 123, 'y' => 456, 'z' => null);
}

function nullable_is_not_optional(): PointWithNullableZ {
  // Invalid return type (Typing[4057])
  //  The field 'z' is missing
  //  The field 'z' is defined
  return shape('x' => 123, 'y' => 456);
}
